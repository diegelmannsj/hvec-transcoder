#!/usr/bin/env python3

import argparse
import subprocess
import sys
import os
import json
import math
import argcomplete

# --- Version History ---
__version__ = "2.9"

VERSION_HISTORY = f"""
,hvec Transcoder v{__version__}
---------------------------------
v2.9: Added optional flags for Quality (-Q, --quality) and Preset (-p, --preset) to allow customization of the QSV transcode. Updated help text.
v2.8: Corrected a major bug in Transcode mode that incorrectly forced the input
      decoder to H.2.64 (h264_qsv), causing errors with non-H.264 source files
      like H.265. The script now correctly allows FFmpeg to auto-detect the
      input codec for hardware decoding.
v2.7: Fixed subtitle embedding (--subs) to correctly map streams, preventing conflicts with existing/incompatible subtitle tracks in the source file.
v2.6: Changed behavior to default the output filename if -o is not specified,
      replacing the previous "info-only" mode for a faster workflow.
v2.5: Changed subtitle handling to automatically convert to SRT when the
      output container is MKV, improving remux compatibility.
v2.4: Added --convert-subs flag to handle incompatible embedded subtitles.
v2.3: Improved --remux mode to intelligently ignore incompatible tracks.
v2.2: Added -r/--remux mode for lossless stream copying.
v2.1: Added --less-noise flag for periodic progress updates.
v2.0: Reworked argument parsing to correctly handle --version flag.
v1.9: Display full version history with --version flag.
v1.8: Added -q/--quiet flag to suppress FFmpeg warnings and progress.
v1.7: Made transcoding more robust by explicitly mapping desired streams.
v1.6: Moved version print to run before argument parsing.
v1.5: Always print version number on execution.
v1.4: Added argcomplete hook for shell autocompletion.
v1.3: Added transcode time estimation to info-only mode.
v1.2: Added info-only mode when only -i is provided.
v1.1: Added --version flag.
v1.0: Initial release.
"""

# --- PERFORMANCE CONSTANT ---
ESTIMATED_FPS = 85

def main():
    """
    Parses arguments and performs media operations: transcode or remux.
    """
    # --- Manually check for --version flag BEFORE argparse ---
    if '-v' in sys.argv or '--version' in sys.argv:
        print(VERSION_HISTORY)
        sys.exit(0)

    # --- Set up the Argument Parser ---
    parser = argparse.ArgumentParser(
        description="A tool to transcode, remux, or inspect video files using Intel QSV.",
        formatter_class=argparse.RawTextHelpFormatter,
        epilog="""
Examples:
  # Transcode with default settings (quality 24, medium preset)
  ,hvec -i movie.mp4

  # Transcode with higher quality and slower, more efficient compression
  ,hvec -i movie.mp4 -Q 20 -p slow

  # Remux a movie while replacing its subtitles with an external SRT file
  ,hvec -i movie.mkv -o movie_new.mkv --subs new.srt --remux
"""
    )
    # --- NEW ARGUMENTS ADDED HERE ---
    parser.add_argument("-i", "--input", required=True, help="Input video file.")
    parser.add_argument("-o", "--output", help="Output MKV file. If omitted, it's generated from the input name.")
    parser.add_argument("-s", "--subs", help="(Optional) External subtitle file to embed.")
    parser.add_argument("-Q", "--quality", type=int, default=24, help="Set the QSV global_quality for the video transcode (1-51, lower is better). Default: 24.")
    parser.add_argument("-p", "--preset", type=str, default='medium',
                        choices=['veryfast', 'faster', 'fast', 'medium', 'slow', 'slower', 'veryslow'],
                        help="Set the QSV encoding preset. Slower presets offer better compression. Default: medium.")
    parser.add_argument("-r", "--remux", action="store_true", help="Perform a lossless remux (stream copy) instead of transcoding.")
    parser.add_argument("-q", "--quiet", action="store_true", help="Suppress all FFmpeg warnings and progress. Overrides --less-noise.")
    parser.add_argument("--less-noise", action="store_true", help="Show progress updates only every 30 seconds.")
    parser.add_argument("--convert-subs", action="store_true", help="Convert embedded subtitle tracks to a compatible format (srt).")
    parser.add_argument("-v", "--version", action="store_true", help="Show the version history and exit.")
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    
    print(f"--- hvec Transcoder v{__version__} ---")
    
    if not os.path.exists(args.input):
        print(f"Error: Input file not found at '{args.input}'", file=sys.stderr)
        sys.exit(1)

    if not args.output:
        base_name, _ = os.path.splitext(args.input)
        args.output = base_name + ".mkv"
        print(f"\nInfo: No output file specified. Defaulting to '{args.output}'")
    
    if args.subs and not os.path.exists(args.subs):
        print(f"Error: Subtitle file not found at '{args.subs}'", file=sys.stderr)
        sys.exit(1)
    
    subtitle_codec = 'srt' if args.convert_subs or args.output.lower().endswith('.mkv') else 'copy'
    
    if args.remux:
        # --- SUB-MODE: Remux ---
        print("\nMode: Lossless Remux")
        ffmpeg_cmd = ['ffmpeg', '-i', args.input]

        if args.subs:
            ffmpeg_cmd.extend(['-i', args.subs])
            ffmpeg_cmd.extend(['-map', '0:v', '-map', '0:a?', '-map', '1:s'])
            ffmpeg_cmd.extend(['-c:v', 'copy', '-c:a', 'copy', '-c:s', subtitle_codec])
        else:
            ffmpeg_cmd.extend(['-map', '0:v:0', '-map', '0:a?', '-map', '0:s?'])
            ffmpeg_cmd.extend(['-c:v', 'copy', '-c:a', 'copy', '-c:s', subtitle_codec])
        
        ffmpeg_cmd.append(args.output)
    else:
        # --- SUB-MODE: Transcode ---
        print("\nMode: QSV Transcode")
        ffmpeg_cmd = ['ffmpeg']
        if args.quiet:
            ffmpeg_cmd.extend(['-loglevel', 'error'])
        elif args.less_noise:
            ffmpeg_cmd.extend(['-stats_period', '30'])
        
        ffmpeg_cmd.extend(['-hwaccel', 'qsv', '-i', args.input])
        
        # --- COMMAND MODIFIED HERE TO USE ARGS ---
        encoding_params = [
            '-c:v', 'hevc_qsv',
            '-preset', args.preset,
            '-global_quality', str(args.quality),
            '-c:a', 'copy'
        ]
        
        if args.subs:
            ffmpeg_cmd.extend(['-i', args.subs])
            ffmpeg_cmd.extend(['-map', '0:v', '-map', '0:a?', '-map', '1:s'])
            ffmpeg_cmd.extend(['-c:s', subtitle_codec])
        else:
            ffmpeg_cmd.extend(['-map', '0:v:0', '-map', '0:a?', '-map', '0:s?'])
            ffmpeg_cmd.extend(['-c:s', subtitle_codec])

        ffmpeg_cmd.extend(encoding_params)
        ffmpeg_cmd.append(args.output)

    run_ffmpeg_command(ffmpeg_cmd)

def run_ffmpeg_command(cmd):
    print("\nExecuting FFmpeg command:")
    cmd_str = ' '.join(f'"{arg}"' if ' ' in arg else arg for arg in cmd)
    print(cmd_str)
    print("\n------------------------- FFmpeg Output -------------------------")
    try:
        subprocess.run(cmd, check=True)
        print("-----------------------------------------------------------------")
        print(f"\nSuccessfully created '{cmd[-1]}'.")
    except FileNotFoundError:
        print("\nError: 'ffmpeg' not found. Is FFmpeg installed and in your PATH?", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print("-----------------------------------------------------------------")
        print(f"\nError: FFmpeg failed with exit code {e.returncode}.", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()